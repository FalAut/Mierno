name: Create Modpack Release

on:
    workflow_dispatch:

jobs:
    create-release:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout main branch
              uses: actions/checkout@v4
              with:
                  fetch-depth: 2
                  ref: main
                  path: main_repo

            - name: Checkout server_pack branch
              uses: actions/checkout@v4
              with:
                  ref: server_pack
                  path: server_pack_dir

            - name: Sync specific directories from main to server_pack
              run: |
                  cd main_repo

                  DIRECTORIES="config defaultconfigs hotai kubejs ldlib"
                  EXCLUDED_SUBDIRS="kubejs/assets kubejs/client_scripts kubejs/config"

                  # Sync directories
                  for DIR in $DIRECTORIES; do
                      if [ "$DIR" = "kubejs" ]; then
                          rsync -a --exclude "assets" --exclude "client_scripts" --exclude "config" "$DIR/" ../temp_kubejs/
                          cd ../server_pack_dir
                          mkdir -p "$DIR"
                          cp -r ../temp_kubejs/* "$DIR/"
                          rm -rf ../temp_kubejs
                          cd ../main_repo
                      else
                          rsync -a --delete "$DIR/" "../server_pack_dir/$DIR/"
                      fi
                  done

            - name: Commit and Push server_pack branch updates
              run: |
                  cd ../server_pack_dir
                  git config --global user.name "github-actions[bot]"
                  git config --global user.email "github-actions[bot]@users.noreply.github.com"

                  if ! git diff-index --quiet HEAD; then
                      git add .
                      git commit -m "Sync changes from main to server_pack"
                      git push origin server_pack
                  else
                      echo "No changes to commit."
                  fi

            - name: Set up environment and determine version
              id: setup
              run: |
                  cd main_repo

                  CHANGELOG_PATH="./CHANGELOG.md"
                  if [ ! -f "$CHANGELOG_PATH" ]; then
                      echo "Error: $CHANGELOG_PATH not found in main_repo."
                      exit 1
                  fi

                  LATEST_VERSION=$(grep -oP '^## v\K[0-9]+(\.[0-9]+)*' "$CHANGELOG_PATH" | head -n1)

                  if [ -z "$LATEST_VERSION" ]; then
                      echo "Error: Failed to extract version from $CHANGELOG_PATH. Ensure it contains a line starting with '## v' followed by a version number."
                      exit 1
                  fi

                  echo "Extracted version: $LATEST_VERSION"
                  echo "VERSION=$LATEST_VERSION" >> $GITHUB_OUTPUT
                  echo "ZIP_NAME=Mierno-$LATEST_VERSION.zip" >> $GITHUB_OUTPUT
                  echo "SERVER_ZIP_NAME=Mierno-$LATEST_VERSION-server.zip" >> $GITHUB_OUTPUT

            - name: Update manifest.json version
              run: |
                  cd main_repo
                  sed -i '/"name": *"Mierno",/!b;n;s/"version": *"[^"]*"/"version": "${{ steps.setup.outputs.VERSION }}"/' manifest.json
                  echo "Updated manifest.json with version ${{ steps.setup.outputs.VERSION }}"

            - name: Create and package modpack
              run: |
                  cd main_repo
                  mkdir overrides
                  cp -r config defaultconfigs hotai kubejs ldlib overrides/
                  zip -r "../${{ steps.setup.outputs.ZIP_NAME }}" overrides manifest.json modlist.html

            - name: Create and package server pack
              run: |
                  cd server_pack_dir

                  rm -f README.md .gitignore

                  zip -r "../${{ steps.setup.outputs.SERVER_ZIP_NAME }}" ./*

            - name: Extract CHANGELOG for current version
              run: |
                  cd main_repo
                  sed -n "/^## v${{ steps.setup.outputs.VERSION }}/,/^## /p" CHANGELOG.md | sed '$d' > ../extracted_changelog.txt

            - name: Create GitHub Release
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: "v${{ steps.setup.outputs.VERSION }}"
                  release_name: "Mierno v${{ steps.setup.outputs.VERSION }}"
                  body_path: extracted_changelog.txt
                  draft: false
                  prerelease: false

            - name: Upload Modpack ZIP
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./${{ steps.setup.outputs.ZIP_NAME }}
                  asset_name: ${{ steps.setup.outputs.ZIP_NAME }}
                  asset_content_type: application/zip

            - name: Upload Server Pack ZIP
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./${{ steps.setup.outputs.SERVER_ZIP_NAME }}
                  asset_name: ${{ steps.setup.outputs.SERVER_ZIP_NAME }}
                  asset_content_type: application/zip
